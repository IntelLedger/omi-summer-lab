// Copyright 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";

// A Work is the representation of musical work (composition). This is
// distinct from a Recording, which is a capture of a specific performance.
message Work {

    // SongwriterPublisher creates an association between an individual
    // songwriter identity and the songwriter's publisher for this work.
    // Works can also be self-published by a songwriter -- in this scenario,
    // a OrganizationalIdentity for the songwriter's publishing company
    // should be created. This is consistent with how the process works today.
    message SongwriterPublisher {

        // Songwriter must be a valid name of an IndividualIdentity
        string songwriter_name = 1;

        // Publisher must be a valid name key of an OrganizationalIdentity
        // type PUBLISHER
        string publisher_name = 2;
    }

    // SongwriterPublisherSplit represents the fractional payment
    // splits on the Work.
    message SongwriterPublisherSplit {

        // A note on splits -- the requirement is that all splits total
        // to 100. Where a non-evenly divisible result occurs, the
        // expectation is that this is handled on generation side
        // (e.g. 33, 33, 34%). While this is not ideal in the real
        // world, it avoids the complexity of a special fixed or
        // decimal representation and avoids the deterministic issues
        // associated with using IEEE floats.
        uint32 split = 1;
        SongwriterPublisher songwriter_publisher = 2;
    }

    // Unique title of the work -- use this as the natural unique key
    string title = 1;

    // International Standard Work Code, Can be null.
    // https://en.wikipedia.org/wiki/International_Standard_Musical_Work_Code
    string ISWC = 2;

    // The constituent SongwriterPublisherSplit.splits must total 100.
    repeated SongwriterPublisherSplit songwriter_publisher_splits = 3;

    // The pubkey used to register the unique name of the work. This must
    // match the Transaction.header.signer_pubkey. Initial creation of the
    // Work is permitted by any pubkey. Future updates to the Work must be
    // signed by the same party.
    string registering_pubkey = 4;
}
